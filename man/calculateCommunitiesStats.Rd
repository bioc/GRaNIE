% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network.R
\name{calculateCommunitiesStats}
\alias{calculateCommunitiesStats}
\title{Generate graph communities and their summarizing statistics}
\usage{
calculateCommunitiesStats(GRN, clustering = "louvain", forceRerun = FALSE, ...)
}
\arguments{
\item{GRN}{Object of class \code{\linkS4class{GRN}}}

\item{clustering}{Character. Default \code{louvain}. One of: \code{louvain}, \code{leiden}, \code{leading_eigen}, \code{fast_greedy}, \code{optimal}, \code{walktrap}. The community detection algorithm to be used. Please bear in mind the robustness and time consumption of the algorithms when opting for an alternative to the default.}

\item{forceRerun}{\code{TRUE} or \code{FALSE}. Default \code{FALSE}. Force execution, even if the GRN object already contains the result. Overwrites the old results.}

\item{...}{Additional parameters for the used clustering method, see the \code{igraph::cluster_*} methods for details on the specific parameters and what they do. For \code{leiden} clustering, for example, you may add a \code{resolution_parameter} to control the granularity of the community detection or \code{n_iterations} to modify the number of iterations.}
}
\value{
The same \code{\linkS4class{GRN}} object, with a table that consists of the connections clustered into communities stored in the \code{stats$communities} slot.
}
\description{
This function generates the TF-gene graph from the filtered GRN object, and clusters its vertices into communities using established community detection algorithms.
}
\examples{
# See the Workflow vignette on the GRaNIE website for examples
# GRN = loadExampleObject()
# GRN = calculateCommunitiesStats(GRN, forceRerun = FALSE)
}
